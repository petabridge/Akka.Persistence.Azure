parameters:
  name: ''
  vmImage: ''
  scriptFileName: ''
  scriptArgs: 'all'
  timeoutInMinutes: 120

jobs:
  - job: ${{ parameters.name }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
        clean: false  # whether to fetch clean each time
        submodules: recursive  # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules
        persistCredentials: true
      # Linux or macOS
      - bash: |
          sudo npm install -g azurite@3.22.0
          sudo mkdir azurite
          sudo azurite --silent --location azurite --debug azirute/debug.log &
        displayName: 'Install and Run Azurite (Linux)'
        condition: in( variables['Agent.OS'], 'Linux', 'Darwin' )
      - task: Bash@3 
        displayName: Linux / OSX Build
        inputs:
          filePath: ${{ parameters.scriptFileName }}
          arguments: ${{ parameters.scriptArgs }}
        continueOnError: true
        condition: in( variables['Agent.OS'], 'Linux', 'Darwin' )
        env:
          AZURE_CONNECTION_STR: UseDevelopmentStorage=true
      # Windows
      - powershell: |
          npm install -g azurite@3.18.0
          mkdir azurite
          Start-Process azurite.cmd -PassThru
        displayName: 'Install and Run Azurite (Windows)'
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      - task: BatchScript@1
        displayName: Windows Build
        inputs:
          filename: ${{ parameters.scriptFileName }}
          arguments: ${{ parameters.scriptArgs }}
        continueOnError: true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        env:
          AZURE_CONNECTION_STR: UseDevelopmentStorage=true   
      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx' #TestResults folder usually
          testRunTitle: ${{ parameters.name }}
          mergeTestResults: true
      - script: 'echo 1>&2'
        failOnStderr: true
        displayName: 'If above is partially succeeded, then fail'
        condition: eq(variables['Agent.JobStatus'], 'SucceededWithIssues')